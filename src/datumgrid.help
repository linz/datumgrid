datumgrd

Program to fit a deformation grid to a set of point displacements. 
The grid extends to a specified distance from the points.  The fitting
balances two factors, 1) matching the point displacements, and 2)
minimizing the distortion in each grid cell (ie shear and non-linear 
distortion).

Running the program:

To run the program create a data file and a command file (below).  Then
run the command using

datumgrid command_file_name output_file

Here command_file_name is the name of the command file, and output_file
is the root name of the output file.  Output files will be generated
named 

<output_file>_grd.csv   The calculated grid node offsets
<output_file>_cpt.csv   The control point data and residuals
<output_file>.log       The log file of the output


Data file:
    
    Space or comma separated file containing:
    
    	id east north deast dnorth [class [error]]
    	id east north dheight [class [error]]
    
    (the second format is for height grids). 
    The east and north coordinates can be in any units (eg lon/lat
    degrees or easting/northing metres).  Whichever is used the final
    grid will be in the same units.
    The offset at each point (deast/dnorth or dheight) are in metres

    The command file defines the approximate relationship between the 
    coordinate units and metres (in coordinate to metres)
    factor from east/north coordinates to metres.  
    The error of the deast/dnorth or dheight values can be explicitly
    defined, otherwise it is based on the default point error or class
    based error defined in the command file.
    
    The file may contain comment lines prefixed with ! or #
    
Command file:
    
    The command file controls how the distortion grid is calculated.

    It contains one command per line.  It may also include comments
    on lines prefixed with ! or #.

    Most commands are optional and a default value will be used if they
    are not specified.
    
    The following template can be used to create a command file.  In
    this values in [] are optional.  #.### are placeholders for numbers.
    [value1|value2..] signifies a choice of possible values.
    

Command file template:

# Used to define a height grid (by default a grid of dx dy offsets is calculated)

height_grid [true|false]

# Specify the name of the data file containing the control points.  More than
# one data file can be used.

data_file  filename

# Convert control point/grid coordinate units to metres 
# for proximity and calculating distortion.  
# For lon/lat grids will typically be something like
# 70000.0 100000.0.  For metre grids default 1 1 is correct.
# 
coordinate_to_metres #.### [#.###]

# Grid can either be defined explicitly by east and north min and
# max values, and number of east and north grid cells (number of 
# east and north values -1), or by specifying the grid spacing,
# in which case the grid is calculated by expanding around the 
# control points.

grid_definition emin nmin emax nmax ngride ngridn

grid_spacing #.### [#.###]
required_point_proximity #.####
beyond_proximity [fit|zero|ignore]

# Control points which are located at grid nodes can be used to
# constrain the dx/dy values at the node, rather than as observation
# equations.  Control points are identified as on nodes if within
# the node_point_tolerance metres of the nearest node.
# If node_points_only is true than points that are not nodes are 
# ignored.

fix_node_points ( true | false )
node_points_only ( true | false )
node_point_tolerance #.###

# For height grids can set a height zero value used for the
# beyond proximity zero option, which will set cells outside
# the range to this value rather than zero

height_zero_value #.###

# The two main factors affecting the fit are the expected 
# errors of the dx/dy or dh control point data and the
# expected distortion error in each grid cell.  Making the 
# default_point_error greater gives less weight to the 
# control points, and making the distortion error greater 
# gives less weight to the distortion constraints (ie allows
# more distortion in the final grid).
# The default_point_error is in units of metres, and the
# distortion_error in units of approximately part per million.

default_point_error #.###
distortion_error #.###

# The distortion error applies to a number of components of
# distortion for which different relative weights can be
# applied. In particular if the weight is zero the distortion
# is ignored and does not constrain the grid.  Generally these 
# should be numbers between 0 and 1.  The precise meaning
# of the distortion error and weights can only be understood by
# reading the code implementation in grdobseq.c!

# For height grids only non_linear_weight and constant_weight apply
# For xy grids constant_error doesn't apply
# non_linear_weight is not adequately defined for height grids
# (it only generates one constraint per grid cell as currently implemented).

shear_weight #.###
scale_weight #.###
non_linear_weight #.###
constant_weight #.### 

# Point errors can also be defined on a per class basis, or
# for individual points in the command file.  If specified
# for specific points they override class errors, and if defined
# for a class that overrides the default point errlr.

point id [error #.###] [reject]
class cc [error #.###] [reject]

# Output options

# Specify the column names for the output grid x, y, dx, dy 
# columns (x, y, dh for height grids)
# Uncertainty columns are std err of dx, std err of dy,
# and correlation of dx,dy, or just std err of dh for height grids

columns xcol ycol dxcol dycol
uncertainty_columns xerr yerr xycorr

# Number of decimal places used for x, y coordinates
coordinate_precision #

# Number of decimal places used for dx, dy or dh values
value_precision #

# If true then include additional columns in the grid
print_grid_params [true|false] (parameter numbers)

# If true then the full grid is output, otherwise only the points
# within the specified proximity are output
fill_grid [true|false]

# If true then the control point output listing includes 
# includes standard errors of calculated components

# calculate_grid_uncertainty [true|false]

# If true then the control point output listing includes 
# standardised residuals (more useful, but time consuming to
# calculate for large grids)

# calc_control_point_stdres [true|false]

